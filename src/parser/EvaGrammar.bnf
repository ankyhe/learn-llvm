%lex

%%

\/\/.*           %empty
\s+              %empty
\"[^\"]*\"       STRING
\d+              NUMBER
[\w\-+*=!<>/]+   SYMBOL

/lex

%{

enum ExpType {
  STRING,
  NUMBER,
  SYMBOL,
  LIST
};

struct Exp {
  ExpType type;

  int number;
  std::string string;
  std::vector<Exp> list;

  Exp(int number): type(ExpType::NUMBER), number(number) {}

  Exp(const std::string &strVal) {
    if (strVal.size() == 0) {
      string = "";
      type = ExpType::STRING;
    } else {
      if (strVal[0] == '"') {
        string = strVal.substr(1, strVal.size() - 2);
        type = ExpType::STRING;
      } else {
        string = strVal;
        type = ExpType::SYMBOL;
      }
    }
  }

  Exp(const std::vector<Exp> list): type(ExpType::LIST), list(list) {}
};

using Value = Exp;

%}

%%

Exp
  : Atom
  | List
  ;

Atom
  : NUMBER { $$ = Exp(std::stoi($1)); }
  | STRING { $$ = Exp($1); }
  | SYMBOL { $$ = Exp($1); }
  ;

List
  : '(' ListEnteries ')' { $$ = $2 }
  ;

ListEnteries
  : %empty { $$ = Exp(std::vector<Exp>{}) }
  | ListEnteries Exp { $1.list.push_back($2); $$ = $1 }
  ;




